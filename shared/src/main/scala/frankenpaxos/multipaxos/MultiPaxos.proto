syntax = "proto2";

package frankenpaxos.multipaxos;

import "scalapb/scalapb.proto";

option (scalapb.options) = {
  package_name: "frankenpaxos.multipaxos"
  flat_package: true
};

// Incoming client requests containing command they want to get chosen
message ClientRequest {
  required string command = 1;
}

// Messages sent between replicas and leaders.
message ProposeToLeader {
  required int32 slot = 1;
  required string command = 2;
}

// Messages sent to decide command for a slot
message Decision {
  required int32 slot = 1;
  required string command = 2;
}

// Struct holding the ballot, slot, and command for a given proposal
// TODO(neil): Why are ballots doubles instead of ints? -Michael.
message ProposedValue {
  required double ballot = 1;
  required int32 slot = 2;
  required string command = 3;
}

// Indicates that majority of acceptors accept ballot, also contains what
// acceptors accepted before
message Adopted {
  required double ballot = 1;
  repeated ProposedValue proposals = 2;
}

// Indicates acceptor has accepted higher ballot, need to abandon this ballot
message Preempted {
  required double ballot = 1;
  required int32 leader_id = 2;
}

// Messages sent between leaders and acceptors.
message Phase1a {
  required int32 leader_id = 1;
  required double ballot = 2;
}

// Messages sent back to leader from acceptors
message Phase1b {
  required double ballot = 1;
  repeated ProposedValue proposals = 2;
}

// Acceptors indicate they accept the ballot
message Phase2b {
  required int32 acceptor_id = 1;
  required double ballot = 2;
  required ProposedValue phase2a_proposal = 3;
}

// Leader tries to get proposal accepted
message Phase2a {
  required int32 leader_id = 1;
  required ProposedValue proposal = 2;
}

// Response to client
message ProposeResponse {
  required string response = 1;
}

// MultiPaxos client inbound message.
message ClientInbound {
  oneof request {
    ProposeResponse propose_response = 1;
  }
}

// MultiPaxos leader inbound message.
message LeaderInbound {
  oneof request {
    ProposeToLeader propose_request = 1;
    Adopted adopted = 2;
    Preempted preempted = 3;
    Phase1b phase1b = 4;
    Phase2b phase2b = 5;
  }
}

// MultiPaxos Replica inbound message.
message ReplicaInbound {
  oneof request {
    ClientRequest client_request = 1;
    Decision decision = 2;
  }
}

// MultiPaxos acceptor inbound message.
message AcceptorInbound {
  oneof request {
    Phase1a phase1a = 1;
    Phase2a phase2a = 2;
  }
}
