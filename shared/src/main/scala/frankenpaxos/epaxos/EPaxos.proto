// A protocol cheatsheet, similar to [1].
//
// Normal case.
//
//   Client         Leader     Other Leader    Replica
//      | ----------> |             |             |        ClientRequest
//      |             | ----------> |             |        PreAccept
//      |             | <---------- |             |        PreAcceptOk
//      |             | ----------> |             |        Accept
//      |             | <---------- |             |        AcceptOk
//      |             | ------------^-----------> |        Commit
//      | <-----------^-------------^------------ |        ClientReply
//
// Recovery.
//
//   Client         Leader     Other Leader    Replica
//      |             | <-----------^------------ |        Recover
//      |             | ----------> |             |        Prepare
//      |             | <---------- |             |        PrepareOk
//
// Recovery.
//
//   Client         Leader     Other Leader    Replica
//      |             | <---------- |             |        Nack
//
// [1]: https://ndpsoftware.com/git-cheatsheet.html

syntax = "proto2";

package frankenpaxos.epaxos;

import "scalapb/scalapb.proto";

option (scalapb.options) = {
  package_name: "frankenpaxos.epaxos"
  flat_package: true
};


// Helper messages. ////////////////////////////////////////////////////////////
// Every instance is of the form `leader_index.instance_number` where
// `leader_index` is the unique index of the leader and `instance_number` is a
// monotonically increasing integer. In the EPaxos paper, for example, these
// are written like R.1 or Q.2.
message Instance {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required int32 leader_index = 1;
  required int32 instance_number = 2;
}

// Every ballot has the form `ordering.leader_index` where `ordering` is a
// monotonically increasing integer and `leader_index` is the unique index of
// the leader.
message Ballot {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required int32 ordering = 1;
  required int32 leader_index = 2;
}

// A special noop command that does not affect the state machine.
message Noop {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";
}

// A client issued command.
message Command {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  // The client's address.
  required bytes client_address = 1;

  // Clients use pseudonyms to simulate multiple clients. See Fast MultiPaxos
  // for more explanation.
  required int32 client_pseudonym = 2;

  // Clients annotate every command with a unique and monotonically increasing
  // id. The pair of (client address, client id) uniquely identify a command.
  required int32 client_id = 3;

  // The actual command.
  required bytes command = 4;
}

message CommandOrNoop {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof value {
    Command command = 1;
    Noop noop = 2;
  }
}

// TODO(mwhittaker): Do we need all these statuses?
enum CommandStatus {
  NotSeen = 0;
  PreAccepted = 1;
  Accepted = 2;
}

// Protocol messages. //////////////////////////////////////////////////////////
message ClientRequest {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required Command command = 1;
}

message PreAccept {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required Instance instance = 1;
  required Ballot ballot = 2;

  required CommandOrNoop command_or_noop = 3;
  required int32 sequence_number = 4;
  repeated Instance dependencies = 5;
}

message PreAcceptOk {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required Instance instance = 1;
  required Ballot ballot = 2;
  required int32 leader_index = 3;

  required int32 sequence_number = 4;
  repeated Instance dependencies = 5;
}

message Accept {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required Instance instance = 1;
  required Ballot ballot = 2;

  required CommandOrNoop command_or_noop = 3;
  required int32 sequence_number = 4;
  repeated Instance dependencies = 5;
}

message AcceptOk {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required Instance instance = 2;
  required Ballot ballot = 3;
  required int32 leader_index = 7;
}

message Commit {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required Instance instance = 1;
  required CommandOrNoop command_or_noop = 2;
  required int32 sequence_number = 3;
  repeated Instance dependencies = 4;
}

message ClientReply {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required int32 client_pseudonym = 1;
  required int32 client_id = 2;
  // The result of executing the command.
  required bytes result = 3;
}

message Recover {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  // TODO(mwhittaker): Figure out what other fields need to go here.
  required Instance instance = 1;
}

message Prepare {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required Instance instance = 1;
  required Ballot ballot = 2;
}

message PrepareOk {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required Ballot ballot = 1;
  required Instance instance = 2;
  required int32 leader_index = 3;

  // When a leader receives a Prepare message for instance I, there are two
  // scenarios to consider:
  //
  //   Case 1. The leader has no command log entry for instance I. In this
  //           case, vote_ballot is set to the null ballot, Ballot(-1, -1),
  //           status is set to NotSeen, and the triple is left empty.
  //
  //   Case 2. The leader has a command log entry for instance I. In this
  //           case, vote_ballot is not the null ballot, status is not NotSeen,
  //           and the triple is not empty.
  required Ballot vote_ballot = 4;
  required CommandStatus status = 5;
  optional CommandOrNoop command_or_noop = 6;
  optional int32 sequence_number = 7;
  repeated Instance dependencies = 8;
}

message Nack {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required Instance instance = 1;
  required Ballot largest_ballot = 2;
}

// Inbound messages. ///////////////////////////////////////////////////////////
message LeaderInbound {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof request {
    ClientRequest client_request = 1;
    PreAccept pre_accept = 2;
    PreAcceptOk pre_accept_ok = 3;
    Accept accept = 4;
    AcceptOk accept_ok = 5;
    Recover recover = 6;
    Prepare prepare = 7;
    PrepareOk prepare_ok = 8;
    Nack nack = 9;
  }
}

message ReplicaInbound {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof request {
    Commit commit = 1;
  }
}

message ClientInbound {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof request {
    ClientReply client_reply = 1;
  }
}
