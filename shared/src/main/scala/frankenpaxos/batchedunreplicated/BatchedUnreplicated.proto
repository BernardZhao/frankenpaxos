// A protocol cheatsheet, similar to [1].
//
//                                  Proxy
//   Client    Batcher   Server     Server
//      | ------> |         |         |      ClientRequest
//      |         | ------> |         |      ClientRequestBatch
//      |         |         | ------> |      ClientReplyBatch
//      | <-------^---------^-------- |      ClientReply
//
// [1]: https://ndpsoftware.com/git-cheatsheet.html
syntax = "proto2";

package frankenpaxos.batchedunreplicated;

import "scalapb/scalapb.proto";

option (scalapb.options) = {
  package_name: "frankenpaxos.batchedunreplicated"
  flat_package: true
};

// Helper messages. ////////////////////////////////////////////////////////////
message Command {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required bytes client_address = 1;
  required int32 command_id = 2;
  required bytes command = 3;
}

message Result {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required bytes client_address = 1;
  required int32 command_id = 2;
  required bytes result = 3;
}

// Protocol messages. //////////////////////////////////////////////////////////
message ClientRequest {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required Command command = 1;
}

message ClientRequestBatch {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  repeated Command command = 1;
}

message ClientReplyBatch {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  repeated Result result = 1;
}


message ClientReply {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required Result result = 1;
}

// Inbound messages. ///////////////////////////////////////////////////////////
message ClientInbound {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof request {
    ClientReply client_reply = 1;
  }
}

message BatcherInbound {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof request {
    ClientRequest client_request = 1;
  }
}

message ServerInbound {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof request {
    ClientRequestBatch client_request_batch = 1;
  }
}

message ProxyServerInbound {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof request {
    ClientReplyBatch client_reply_batch = 1;
  }
}

