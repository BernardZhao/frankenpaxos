// A protocol cheatsheet, similar to [1].
//
// Normal case.
//
//                     Dependency
//                      Service
//   Client    Leader    Node   Proposer Acceptor Replica
//      | -----> |        |        |        |        |     ClientRequest
//      |        | -----> |        |        |        |     DependencyRequest
//      |        | <----- |        |        |        |     DependencyReply
//      |        | -------^------> |        |        |     Propose
//      |        |        |        | -----> |        |     Phase2a
//      |        |        |        | <----- |        |     Phase2b
//      |        |        |        | -------^------> |     Commit
//      | <------^--------^--------^--------^------- |     ClientReply
//
// Recovery via proposer.
//
//                     Dependency
//                      Service
//   Client    Leader    Node   Proposer Acceptor Replica
//      |        |        |        | <------^------- |     Recover
//      |        |        |        | -----> |        |     Phase1a
//      |        |        |        | <----- |        |     Phase1b
//      |        |        |        | -----> |        |     Phase2a
//      |        |        |        | <----- |        |     Phase2b
//      |        |        |        | -------^------> |     Commit
//      | <------^--------^--------^--------^------- |     ClientReply
//
// Recovery via replica.
//
//                     Dependency
//                      Service
//   Client    Leader    Node   Proposer Acceptor Replica
//      |        |        |        |        |   .--- |     Recover
//      |        |        |        |        |   '--> |
//      |        |        |        |        |   .--- |     Commit
//      |        |        |        |        |   '--> |
//      |        |        |        |        |   .--- |     CommitSnapshot
//      |        |        |        |        |   '--> |
//      | <------^--------^--------^--------^------- |     ClientReply
//
// Snapshotting.
//
//                     Dependency
//                      Service
//   Client    Leader    Node   Proposer Acceptor Replica
//      |        | <------^--------^--------^------- |     SnapshotRequest
//
// Misc.
//                     Dependency
//                      Service
//   Client    Leader    Node   Proposer Acceptor Replica
//      |        |        |        | <----- |        |     Nack
//      |        |        |        |        | <----- |     GarbageCollect
//      |        |        |        | <------^------- |     GarbageCollect
//
// [1]: https://ndpsoftware.com/git-cheatsheet.html

syntax = "proto2";

package frankenpaxos.simplegcbpaxos;

import "frankenpaxos/clienttable/ClientTable.proto";
import "frankenpaxos/compact/IntPrefixSet.proto";
import "scalapb/scalapb.proto";

option (scalapb.options) = {
  package_name: "frankenpaxos.simplegcbpaxos"
  flat_package: true
};

// Helper messages. ////////////////////////////////////////////////////////////
message VertexId {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required int32 leader_index = 1;
  required int32 id = 2;
}

// A special noop command that does not affect the state machine.
message Noop {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";
}

// A special snapshot command that does not affect the state machine. When a
// replica encounters a snapshot command, it takes a snapshot of the state
// machine.
message Snapshot {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";
}

// A client issued command.
message Command {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  // The client's address.
  required bytes client_address = 1;

  // Clients use pseudonyms to simulate multiple clients. See Fast MultiPaxos
  // for more explanation.
  required int32 client_pseudonym = 2;

  // Clients annotate every command with a unique and monotonically increasing
  // id. The pair of (client address, client id) uniquely identify a command.
  required int32 client_id = 3;

  // The actual command.
  required bytes command = 4;
}

message CommandOrSnapshot {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof value {
    Command command = 1;
    Snapshot snapshot = 2;
  }
}

message Proposal {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof value {
    Command command = 1;
    Noop noop = 2;
    Snapshot snapshot = 3;
  }
}

message VertexIdPrefixSetProto {
  required int32 numLeaders = 1;
  repeated frankenpaxos.compact.IntPrefixSetProto int_prefix_set = 2;
}

message VoteValueProto {
  required Proposal proposal = 1;
  required VertexIdPrefixSetProto dependencies = 2;
}

// Protocol messages. //////////////////////////////////////////////////////////
message ClientRequest {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required Command command = 1;
}

message SnapshotRequest {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";
}

message DependencyRequest {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required VertexId vertex_id = 1;
  required CommandOrSnapshot command_or_snapshot = 2;
}

message DependencyReply {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required VertexId vertex_id = 1;
  required int32 dep_service_node_index = 2;
  required VertexIdPrefixSetProto dependencies = 3;
}

message Propose {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required VertexId vertex_id = 1;
  required CommandOrSnapshot command_or_snapshot = 2;
  required VertexIdPrefixSetProto dependencies = 3;
}

message Phase1a {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required VertexId vertex_id = 1;
  required int32 round = 2;
}

message Phase1b {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required VertexId vertex_id = 1;
  required int32 acceptor_id = 2;
  required int32 round = 3;
  required int32 vote_round = 4;
  optional VoteValueProto vote_value = 5;
}

message Phase2a {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required VertexId vertex_id = 1;
  required int32 round = 2;
  required VoteValueProto vote_value = 3;
}

message Phase2b {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required VertexId vertex_id = 1;
  required int32 acceptor_id = 2;
  required int32 round = 3;
}

message Nack {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required VertexId vertex_id = 1;
  required int32 higher_round = 3;
}

message Commit {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required VertexId vertex_id = 1;
  required Proposal proposal = 2;
  required VertexIdPrefixSetProto dependencies = 3;
}

message ClientReply {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  // The client pseudonym and id of the command.
  required int32 client_pseudonym = 1;
  required int32 client_id = 2;
  required bytes result = 3;
}

message Recover {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  // TODO(mwhittaker): Figure out what other fields need to go here.
  required VertexId vertex_id = 1;
}

message CommitSnapshot {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  required int32 id = 1;
  required VertexIdPrefixSetProto watermark = 2;
  required bytes state_machine = 3;
  required clienttable.ClientTableProto client_table = 4;
}

message GarbageCollect {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  // The index of the replica sending the message.
  required int32 replica_index = 1;

  // The committed frontier. See Replica.committedFrontier for documentation.
  repeated int32 frontier = 3;
}

// Inbound messages. ///////////////////////////////////////////////////////////
message LeaderInbound {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof request {
    ClientRequest client_request = 1;
    SnapshotRequest snapshot_request = 2;
    DependencyReply dependency_reply = 3;
  }
}

message DepServiceNodeInbound {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof request {
    DependencyRequest dependency_request = 1;
  }
}

message ProposerInbound {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof request {
    Propose propose = 1;
    Phase1b phase1b = 2;
    Phase2b phase2b = 3;
    Nack nack = 4;
    Recover recover = 5;
    GarbageCollect garbage_collect = 6;
  }
}

message AcceptorInbound {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof request {
    Phase1a phase1a = 1;
    Phase2a phase2a = 2;
    GarbageCollect garbage_collect = 3;
  }
}

message ReplicaInbound {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof request {
    Commit commit = 1;
    Recover recover = 2;
    CommitSnapshot commit_snapshot = 3;
  }
}

message GarbageCollectorInbound {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof request {
    GarbageCollect garbage_collect = 1;
  }
}

message ClientInbound {
  option (scalapb.message).annotations =
    "@scala.scalajs.js.annotation.JSExportAll";

  oneof request {
    ClientReply client_reply = 1;
  }
}
