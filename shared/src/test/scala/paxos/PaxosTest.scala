package frankenpaxos.paxos

import frankenpaxos.simulator._
import org.scalatest._

class PaxosSpec extends FlatSpec {
  "A Paxos instance" should "only ever choose a single value" in {
    // TODO(mwhittaker): If a test case fails, show the log.
    // TODO(mwhittaker): Uniquely id each message.
    for (f <- 1 to 3) {
      val sim = new SimulatedPaxos(f)
      Simulator
        .simulate(sim, runLength = 100, numRuns = 1000)
        .flatMap(b => Simulator.minimize(sim, b.seed, b.history)) match {
        case Some(BadHistory(seed, history, throwable)) => {
          // https://stackoverflow.com/a/1149712/3187068
          val sw = new java.io.StringWriter()
          val pw = new java.io.PrintWriter(sw)
          throwable.printStackTrace(pw)

          fail(s"Seed: $seed\n$sw\n${sim.historyToString(history)}")
        }
        case None => {}
      }
    }
  }

  it should "choose a value in the simple case" in {
    val paxos = new Paxos(1)
    val transport = paxos.transport

    // The following unit test was autogenerated by the JsTransport. The unit
    // test may be incomplete. Modify appropriately.
    // format: off
    paxos.clients(0).propose("foo")
    transport.deliverMessage(FakeTransportMessage(src=FakeTransportAddress("Client 1"), dst=FakeTransportAddress("Leader 1"), bytes=LeaderInbound.fromAscii("""propose_request { v: "foo" }""").toByteArray.to[Vector]))
    transport.deliverMessage(FakeTransportMessage(src=FakeTransportAddress("Leader 1"), dst=FakeTransportAddress("Acceptor 2"), bytes=AcceptorInbound.fromAscii("""phase1a { round: 0 }""").toByteArray.to[Vector]))
    transport.deliverMessage(FakeTransportMessage(src=FakeTransportAddress("Leader 1"), dst=FakeTransportAddress("Acceptor 3"), bytes=AcceptorInbound.fromAscii("""phase1a { round: 0 }""").toByteArray.to[Vector]))
    transport.deliverMessage(FakeTransportMessage(src=FakeTransportAddress("Leader 1"), dst=FakeTransportAddress("Acceptor 1"), bytes=AcceptorInbound.fromAscii("""phase1a { round: 0 }""").toByteArray.to[Vector]))
    transport.deliverMessage(FakeTransportMessage(src=FakeTransportAddress("Acceptor 2"), dst=FakeTransportAddress("Leader 1"), bytes=LeaderInbound.fromAscii("""phase1b { round: 0 acceptor_id: 1 vote_round: -1 }""").toByteArray.to[Vector]))
    transport.deliverMessage(FakeTransportMessage(src=FakeTransportAddress("Acceptor 3"), dst=FakeTransportAddress("Leader 1"), bytes=LeaderInbound.fromAscii("""phase1b { round: 0 acceptor_id: 2 vote_round: -1 }""").toByteArray.to[Vector]))
    transport.deliverMessage(FakeTransportMessage(src=FakeTransportAddress("Acceptor 1"), dst=FakeTransportAddress("Leader 1"), bytes=LeaderInbound.fromAscii("""phase1b { round: 0 acceptor_id: 0 vote_round: -1 }""").toByteArray.to[Vector]))
    transport.deliverMessage(FakeTransportMessage(src=FakeTransportAddress("Leader 1"), dst=FakeTransportAddress("Acceptor 2"), bytes=AcceptorInbound.fromAscii("""phase2a { round: 0 value: "foo" }""").toByteArray.to[Vector]))
    transport.deliverMessage(FakeTransportMessage(src=FakeTransportAddress("Leader 1"), dst=FakeTransportAddress("Acceptor 1"), bytes=AcceptorInbound.fromAscii("""phase2a { round: 0 value: "foo" }""").toByteArray.to[Vector]))
    transport.deliverMessage(FakeTransportMessage(src=FakeTransportAddress("Leader 1"), dst=FakeTransportAddress("Acceptor 3"), bytes=AcceptorInbound.fromAscii("""phase2a { round: 0 value: "foo" }""").toByteArray.to[Vector]))
    transport.deliverMessage(FakeTransportMessage(src=FakeTransportAddress("Acceptor 2"), dst=FakeTransportAddress("Leader 1"), bytes=LeaderInbound.fromAscii("""phase2b { acceptor_id: 1 round: 0 }""").toByteArray.to[Vector]))
    transport.deliverMessage(FakeTransportMessage(src=FakeTransportAddress("Acceptor 1"), dst=FakeTransportAddress("Leader 1"), bytes=LeaderInbound.fromAscii("""phase2b { acceptor_id: 0 round: 0 }""").toByteArray.to[Vector]))
    transport.deliverMessage(FakeTransportMessage(src=FakeTransportAddress("Acceptor 3"), dst=FakeTransportAddress("Leader 1"), bytes=LeaderInbound.fromAscii("""phase2b { acceptor_id: 2 round: 0 }""").toByteArray.to[Vector]))
    transport.deliverMessage(FakeTransportMessage(src=FakeTransportAddress("Leader 1"), dst=FakeTransportAddress("Client 1"), bytes=ClientInbound.fromAscii("""propose_reply { chosen: "foo" }""").toByteArray.to[Vector]))
    assertResult(Some("foo"))(paxos.clients(0).chosenValue)
    // format: on
  }
}
